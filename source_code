{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "861f533a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    product_id   price  Total_Revenue\n",
      "0           64  239000         956000\n",
      "1      3954203   57500          57500\n",
      "2      3954203   60000         180000\n",
      "3      3954203   64000         640000\n",
      "4      3998909   15500          15500\n",
      "5      3998909   16500         231000\n",
      "6      3998909   17000          34000\n",
      "7      4085861   52000        1040000\n",
      "8      4085861   53500        2140000\n",
      "9      4085861   58000        2204000\n",
      "10     4085861   60000         180000\n",
      "11     4085861   62500        1812500\n",
      "12     4085861   67000         871000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Import file csv to dataframe\n",
    "prices = pd.read_csv('Downloads/prices.csv')\n",
    "sales = pd.read_csv('Downloads/sales.csv')\n",
    "\n",
    "# Change datatype from object to datetime\n",
    "prices['updated_at'] = pd.to_datetime(prices['updated_at'])\n",
    "sales['ordered_at'] = pd.to_datetime(sales['ordered_at'])\n",
    "\n",
    "# Sort sales value by ordered_at\n",
    "sales_sorted = sales.sort_values('ordered_at')\n",
    "prices_sorted = prices.sort_values('updated_at')\n",
    "                                   \n",
    "# Merge 2 table using merge_asof\n",
    "merge = pd.merge_asof(\n",
    "     sales_sorted, prices_sorted,\n",
    "    left_on='ordered_at',\n",
    "    right_on='updated_at',\n",
    "    by='product_id',\n",
    "    direction='nearest'\n",
    ")\n",
    "\n",
    "# Sort by product_id\n",
    "merge_sorted = merge.sort_values(['product_id', 'ordered_at'], ascending = False)\n",
    "\n",
    "#define calculate_price function and create column 'price'\n",
    "def calculate_price(row):\n",
    "    if row['ordered_at'] >= row['updated_at']:\n",
    "        return row['new_price']\n",
    "    else:\n",
    "        return row['old_price']\n",
    "merge_sorted['price'] = merge.apply(calculate_price, axis=1)\n",
    "\n",
    "#add column 'revenue'\n",
    "merge_sorted['revenue'] = merge_sorted['price'] * merge_sorted['quantity_ordered']\n",
    "\n",
    "#calculate total revene of each product at each price\n",
    "merge_groupby = merge_sorted.groupby(['product_id','price'])['revenue'].sum().reset_index()\n",
    "merge_groupby = merge_groupby.rename(columns={'revenue': 'Total_Revenue'})\n",
    "\n",
    "#print total revene of each product at each price\n",
    "print(merge_groupby)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dce0c912",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
